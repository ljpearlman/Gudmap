/* Generated By:JavaCC: Do not edit this line. BooleanQueryParser.java */
        package gmerg.model.BooleanQueryParser;

        public class BooleanQueryParser implements BooleanQueryParserConstants {
                static void main( String[] args ) throws ParseException, TokenMgrError {
                        BooleanQueryParser parser = new BooleanQueryParser( System.in ) ;
                        parser.parseQuery();
                }

  final public String parseQuery() throws ParseException {
        Token nextToken;
        String code;
        String temp;
    nextToken = jj_consume_token(TYPE);
         code = nextToken.image;
    nextToken = jj_consume_token(COLON);
         code += nextToken.image;
    temp = term();
         code += " " + temp;
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case OPERATOR:
        ;
        break;
      default:
        jj_la1[0] = jj_gen;
        break label_1;
      }
      nextToken = jj_consume_token(OPERATOR);
                 code += " " + nextToken.image;
      temp = term();
                 code += " | " + temp;
    }
    jj_consume_token(0);
         {if (true) return  code;}
    throw new Error("Missing return statement in function");
  }

  final public String term() throws ParseException {
        Token nextToken;
        String code;
    code = expression();
    nextToken = jj_consume_token(OPEN_BRACKET);
         code += nextToken.image;
    nextToken = jj_consume_token(POSITION);
         code += nextToken.image;
    nextToken = jj_consume_token(ORGAN);
         code += " " + nextToken.image;
    nextToken = jj_consume_token(STAGE);
         code += " " + nextToken.image;
    jj_consume_token(DOT);
    jj_consume_token(DOT);
    nextToken = jj_consume_token(STAGE);
         code += ".." + nextToken.image;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case PATTERN:
      nextToken = jj_consume_token(PATTERN);
                 code += " " + nextToken.image;
      break;
    default:
      jj_la1[1] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LOCATION:
      nextToken = jj_consume_token(LOCATION);
                 code += " " + nextToken.image;
      break;
    default:
      jj_la1[2] = jj_gen;
      ;
    }
    nextToken = jj_consume_token(CLOSE_BRACKET);
                code += nextToken.image;
                {if (true) return  code;}
    throw new Error("Missing return statement in function");
  }

  final public String expression() throws ParseException {
        Token nextToken;
        String e1=null;
        String e2=null;
        String e3=null;
        String code = "";
    nextToken = jj_consume_token(EXPRESSION);
         code = nextToken.image;
         e1 = nextToken.image;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case COMMA:
      jj_consume_token(COMMA);
      nextToken = jj_consume_token(EXPRESSION);
                        e2 = nextToken.image;
                        code += "," + nextToken.image;
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        jj_consume_token(COMMA);
        nextToken = jj_consume_token(EXPRESSION);
                                e3 = nextToken.image;
                                code += "," + nextToken.image;
        break;
      default:
        jj_la1[3] = jj_gen;
        ;
      }
      break;
    default:
      jj_la1[4] = jj_gen;
      ;
    }
                if (e2!=null && e2.equals(e1) || e3!=null && (e3.equals(e1) || e3.equals(e2))) {                /*semantic test for types*/
                        String exp = (e3!=null && e3.equals(e2))? e3 : e1;
                        {if (true) throw new ParseException("Multiple \u005c"expression\u005c" clause \u005c"" + exp + "\u005c" is used.");}
                }
                else
                        {if (true) return code;}
    throw new Error("Missing return statement in function");
  }

  /** Generated Token Manager. */
  public BooleanQueryParserTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private int jj_gen;
  final private int[] jj_la1 = new int[5];
  static private int[] jj_la1_0;
  static {
      jj_la1_init_0();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x10000,0x4000,0x8000,0x20,0x20,};
   }

  /** Constructor with InputStream. */
  public BooleanQueryParser(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public BooleanQueryParser(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new BooleanQueryParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 5; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 5; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public BooleanQueryParser(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new BooleanQueryParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 5; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 5; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public BooleanQueryParser(BooleanQueryParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 5; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(BooleanQueryParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 5; i++) jj_la1[i] = -1;
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.List jj_expentries = new java.util.ArrayList();
  private int[] jj_expentry;
  private int jj_kind = -1;

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[20];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 5; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 20; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = (int[])jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

        }
